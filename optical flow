{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPMJIQqAMH2x23+iqB0hcvk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **21BAI1168 Parthiba Mukhopadhyay**"],"metadata":{"id":"2UFYQHP_Y7bB"}},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"15aLtmdOJDnwawW04G1zuIQWBCQIeykwB"},"id":"Etht28ctOG0G","executionInfo":{"status":"ok","timestamp":1713244381534,"user_tz":-330,"elapsed":13973,"user":{"displayName":"Parthiba Mukhopadhyay 21BAI1168","userId":"11238149644334351377"}},"outputId":"4730d8e9-3879-40c6-bbec-9a8ed76725da"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["import numpy as np\n","import cv2 as cv\n","import matplotlib.pyplot as plt\n","from scipy.ndimage import convolve\n","\n","def lucas_kanade(prev_frame, next_frame, window_size=5):\n","    # Compute gradients\n","    Ix = convolve(prev_frame, [[-1, 1], [-1, 1]])\n","    Iy = convolve(prev_frame, [[-1, -1], [1, 1]])\n","    It = next_frame - prev_frame\n","\n","    half_window = window_size // 2\n","    Ix_squared = Ix ** 2\n","    Iy_squared = Iy ** 2\n","    IxIy = Ix * Iy\n","    IxIt = Ix * It\n","    IyIt = Iy * It\n","\n","    # Sum over the window\n","    A = convolve(Ix_squared, np.ones((window_size, window_size)))\n","    B = convolve(IxIy, np.ones((window_size, window_size)))\n","    C = convolve(Iy_squared, np.ones((window_size, window_size)))\n","    D = convolve(IxIt, np.ones((window_size, window_size)))\n","    E = convolve(IyIt, np.ones((window_size, window_size)))\n","\n","    # Compute optical flow\n","    determinant = A * C - B ** 2\n","    u = ((-B * E) + (C * D)) / determinant\n","    v = ((-B * D) + (A * E)) / determinant\n","\n","    return u, v\n","\n","def farneback(prev_frame, next_frame):\n","    flow = cv.calcOpticalFlowFarneback(prev_frame, next_frame, None, 0.5, 3, 15, 3, 5, 1.2, 0)\n","    return flow[..., 0], flow[..., 1]\n","\n","# Load video file\n","cap = cv.VideoCapture(\"slow_traffic.mp4\")\n","\n","# Read first frame\n","ret, first_frame = cap.read()\n","prev_gray = cv.cvtColor(first_frame, cv.COLOR_BGR2GRAY)\n","\n","# Define the number of frames to process\n","num_frames = 10\n","\n","for _ in range(num_frames):\n","    ret, frame = cap.read()\n","    if not ret:\n","        break\n","\n","    gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)\n","\n","    # Calculate optical flow using Lucas-Kanade\n","    u_lk, v_lk = lucas_kanade(prev_gray, gray)\n","\n","    # Calculate optical flow using Farneback\n","    u_fb, v_fb = farneback(prev_gray, gray)\n","\n","    # Display results\n","    plt.figure(figsize=(16, 6))\n","\n","    plt.subplot(1, 3, 1)\n","    plt.imshow(frame[..., ::-1])\n","    plt.title('Input Frame')\n","    plt.axis('off')\n","\n","    plt.subplot(1, 3, 2)\n","    plt.imshow(np.sqrt(u_lk**2 + v_lk**2), cmap='viridis')\n","    plt.title('Lucas-Kanade Optical Flow Magnitude')\n","    plt.axis('off')\n","\n","    plt.subplot(1, 3, 3)\n","    plt.imshow(np.sqrt(u_fb**2 + v_fb**2), cmap='viridis')\n","    plt.title('Farneback Optical Flow Magnitude')\n","    plt.axis('off')\n","\n","    plt.show()\n","\n","    prev_gray = gray\n","\n","cap.release()\n","cv.destroyAllWindows()\n"]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from scipy.ndimage import convolve\n","import cv2 as cv\n","\n","def lucas_kanade(prev_frame, next_frame, window_size=5):\n","    # Compute gradients\n","    Ix = convolve(prev_frame, [[-1, 1], [-1, 1]])\n","    Iy = convolve(prev_frame, [[-1, -1], [1, 1]])\n","    It = next_frame - prev_frame\n","\n","    half_window = window_size // 2\n","    Ix_squared = Ix ** 2\n","    Iy_squared = Iy ** 2\n","    IxIy = Ix * Iy\n","    IxIt = Ix * It\n","    IyIt = Iy * It\n","\n","    # Sum over the window\n","    A = convolve(Ix_squared, np.ones((window_size, window_size)))\n","    B = convolve(IxIy, np.ones((window_size, window_size)))\n","    C = convolve(Iy_squared, np.ones((window_size, window_size)))\n","    D = convolve(IxIt, np.ones((window_size, window_size)))\n","    E = convolve(IyIt, np.ones((window_size, window_size)))\n","\n","    # Compute optical flow\n","    determinant = A * C - B ** 2\n","    u = ((-B * E) + (C * D)) / determinant\n","    v = ((-B * D) + (A * E)) / determinant\n","\n","    return u, v\n","\n","def display_optical_flow(video_path, method='Lucas-Kanade', num_frames=10):\n","    # Load video file\n","    cap = cv.VideoCapture(video_path)\n","\n","    # Read first frame\n","    ret, first_frame = cap.read()\n","    prev_gray = cv.cvtColor(first_frame, cv.COLOR_BGR2GRAY)\n","\n","    # Define the scale for displaying the flow path\n","    scale = 10\n","\n","    # Counter for frames\n","    frame_count = 0\n","\n","    while(cap.isOpened() and frame_count < num_frames):\n","        ret, frame = cap.read()\n","        if not ret:\n","            break\n","\n","        gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)\n","\n","        # Calculate optical flow using Lucas-Kanade\n","        u_lk, v_lk = lucas_kanade(prev_gray, gray)\n","\n","        # Display results\n","        plt.figure(figsize=(16, 6))\n","\n","        # Display input frame\n","        plt.subplot(1, 3, 1)\n","        plt.imshow(frame[..., ::-1])\n","        plt.title('Input Frame')\n","        plt.axis('off')\n","\n","        # Overlay flow vectors on input frame\n","        plt.subplot(1, 3, 2)\n","        plt.imshow(frame[..., ::-1])\n","        for i in range(0, frame.shape[0], scale):\n","            for j in range(0, frame.shape[1], scale):\n","                plt.arrow(j, i, u_lk[i, j], v_lk[i, j], color='r', head_width=2, head_length=3)\n","        plt.title('Lucas-Kanade Optical Flow')\n","        plt.axis('off')\n","\n","        plt.show()\n","\n","        prev_gray = gray\n","        frame_count += 1\n","\n","    cap.release()\n","    cv.destroyAllWindows()\n","\n","# Example usage:\n","video_path = \"slow_traffic.mp4\"\n","display_optical_flow(video_path)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1Q9eed_dqu5lRf506txdl46nu2Uv3XuTu"},"id":"-0h_kNb6TxTU","executionInfo":{"status":"ok","timestamp":1713244487373,"user_tz":-330,"elapsed":33061,"user":{"displayName":"Parthiba Mukhopadhyay 21BAI1168","userId":"11238149644334351377"}},"outputId":"a613bfab-7eef-42d9-861a-0cb7f87387f7"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import cv2 as cv\n","\n","def farneback(prev_frame, next_frame):\n","    flow = cv.calcOpticalFlowFarneback(prev_frame, next_frame, None, 0.5, 3, 15, 3, 5, 1.2, 0)\n","    return flow[..., 0], flow[..., 1]\n","\n","def display_optical_flow(video_path, method='Farneback', num_frames=10):\n","    # Load video file\n","    cap = cv.VideoCapture(video_path)\n","\n","    # Read first frame\n","    ret, first_frame = cap.read()\n","    prev_gray = cv.cvtColor(first_frame, cv.COLOR_BGR2GRAY)\n","\n","    # Define the scale for displaying the flow path\n","    scale = 10\n","\n","    # Counter for frames\n","    frame_count = 0\n","\n","    while(cap.isOpened() and frame_count < num_frames):\n","        ret, frame = cap.read()\n","        if not ret:\n","            break\n","\n","        gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)\n","\n","        # Calculate optical flow using Farneback\n","        u_fb, v_fb = farneback(prev_gray, gray)\n","\n","        # Display results\n","        plt.figure(figsize=(16, 6))\n","\n","        # Display input frame\n","        plt.subplot(1, 3, 1)\n","        plt.imshow(frame[..., ::-1])\n","        plt.title('Input Frame')\n","        plt.axis('off')\n","\n","        # Overlay flow vectors on input frame\n","        plt.subplot(1, 3, 2)\n","        plt.imshow(frame[..., ::-1])\n","        for i in range(0, frame.shape[0], scale):\n","            for j in range(0, frame.shape[1], scale):\n","                plt.arrow(j, i, u_fb[i, j], v_fb[i, j], color='r', head_width=2, head_length=3)\n","        plt.title('Farneback Optical Flow')\n","        plt.axis('off')\n","\n","        plt.show()\n","\n","        prev_gray = gray\n","        frame_count += 1\n","\n","    cap.release()\n","    cv.destroyAllWindows()\n","\n","# Example usage:\n","video_path = \"slow_traffic.mp4\"\n","display_optical_flow(video_path)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1RILzYU_yObjngswrcxmZ-ydAuOrXDnkz"},"id":"afcpx6CIVW8w","executionInfo":{"status":"ok","timestamp":1713245472024,"user_tz":-330,"elapsed":35533,"user":{"displayName":"Parthiba Mukhopadhyay 21BAI1168","userId":"11238149644334351377"}},"outputId":"808ae4a0-78a5-41ac-c2c5-4491be2af796"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"JJ44K9a5VoHg"},"execution_count":null,"outputs":[]}]}